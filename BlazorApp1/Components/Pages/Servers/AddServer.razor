@page "/AddServer"

@inject IJSRuntime JSRuntime

@rendermode InteractiveServer 


<h3>Add Server</h3>
<NavigationLock OnBeforeInternalNavigation="OnInternal" ConfirmExternalNavigation="true"></NavigationLock>
<EditForm Model="Server" OnValidSubmit="HandleSubmit" FormName="ServerAdd">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="card mb-3">
        <div class="card-header">
            <h5 class="card-title">Add Server Details</h5>
        </div>

        <AddFormFiled class="p-1" Lable="Name">
            <Control>
                <InputText id="Name" class="form-control" @bind-Value="Server!.Name"/>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => Server!.Name"></ValidationMessage>
            </ValidationControl>
        </AddFormFiled>

        <AddFormFiled Lable="City">
            <Control>
                <InputText id="City" class="form-control" @bind-Value="Server!.City"/>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => Server!.City"></ValidationMessage>
            </ValidationControl>
        </AddFormFiled>

        <AddFormFiled Lable="Status">
            <Control>
                <InputCheckbox id="status" class="form-Checkbox" @bind-Value="Server!.IsOnline"/>
            </Control>
        </AddFormFiled>

        <div class="card-footer">
            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Save</Button>
                <Button Color="ButtonColor.Info" @onclick="GoBack"> Back</Button>
            </div>
        </div>
    </div>

    <ValidationSummary/>
</EditForm>

@code {
    private MyAlert _warningAlert = default!;
    private Server? Server { get; set; }
    private bool ShowAlert { get; set; }

    protected override async void OnInitialized()
    {
        Server = new Server();
    }

    private void GoBack()
    {

        Navigation.NavigateTo("/Servers");
    }

    private void HandleSubmit(EditContext obj)
    {
        if (Server == null)
            return;

        ServersRepository.AddServer(Server);
        Navigation.NavigateTo("/Servers");
    }

    private async void OnInternal(LocationChangingContext obj)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "are U sure sure ? ");
        
        if(!result)
               obj.PreventNavigation();
    }

} 