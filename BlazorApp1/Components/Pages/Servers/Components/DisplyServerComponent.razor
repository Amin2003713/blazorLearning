@rendermode InteractiveServer

<div class="p-1" @key="context.Id">
    @context.Name in @context.City is
    <span style="color:@(context.IsOnline ? "green" : "red")">
        @(context.IsOnline ? "Online" : "Offline")
    </span>
    
    <Button onclick="@(() => { GoToEdit(context.Id); })" Color="ButtonColor.Warning">Edit</Button>
    <Button Type="ButtonType.Button" Color="ButtonColor.Light"
            @onclick="ToggleServerStatus">
        Toggle
    </Button>
    <Button Type="ButtonType.Button" Color="ButtonColor.Danger"
            @onclick="DeleteServer">
        Delete
    </Button>
</div>

@code {
    [Parameter] public Server context { get; set; } = default!;
    [Parameter] public EventCallback<int> OnServerDeleted { get; set; }

    private void ToggleServerStatus()
    {
        context.IsOnline = !context.IsOnline;
        ServersRepository.UpdateServer(context.Id, context);
    }

    private void DeleteServer()
    {
        if (context.Id != 0)
        {
            ServersRepository.DeleteServer(context.Id);
            OnServerDeleted.InvokeAsync(context.Id);
        }
    }

    private void GoToEdit(int id)
    {
       Navigation.NavigateTo($"/servers/{id}");
    }

}
